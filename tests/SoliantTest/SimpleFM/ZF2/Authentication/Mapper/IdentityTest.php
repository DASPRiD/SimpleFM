<?php
namespace SoliantTest\SimpleFM\ZF2\Authentication\Mapper;

use Soliant\SimpleFM\ZF2\Authentication\Mapper\Exception\InvalidArgumentException;
use Soliant\SimpleFM\ZF2\Authentication\Mapper\Identity;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-06-28 at 11:22:22.
 */
class IdentityTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Identity
     */
    protected $identity1;

    /**
     * @var Identity
     */
    protected $identity2;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->identity1 = new Identity(
            'username',
            'password',
            true,
            null,
            ['simpleFMAdapterRowKey' => 'simpleFMAdapterRowValue']
        );

        $this->identity2 = new Identity(
            'username',
            'password',
            false,
            'encryptionKey',
            ['simpleFMAdapterRowKey' => 'simpleFMAdapterRowValue']
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Soliant\SimpleFM\ZF2\Authentication\Mapper\Identity::__construct
     * @covers Soliant\SimpleFM\ZF2\Authentication\Mapper\Identity::getIsLoggedIn
     * @covers Soliant\SimpleFM\ZF2\Authentication\Mapper\Identity::setIsLoggedIn
     * @covers Soliant\SimpleFM\ZF2\Authentication\Mapper\Identity::setArbitraryProperty
     * @covers Soliant\SimpleFM\ZF2\Authentication\Mapper\Identity::getUsername
     * @covers Soliant\SimpleFM\ZF2\Authentication\Mapper\Identity::setUsername
     */
    public function testGetsSets()
    {
        $this->identity1->setIsLoggedIn(true);
        $this->assertEquals(true, $this->identity1->getIsLoggedIn());
        $this->assertEquals('username', $this->identity1->getUsername());
        $this->assertEquals('password', $this->identity2->getPassword('encryptionKey'));
    }

    /**
     * @covers Soliant\SimpleFM\ZF2\Authentication\Mapper\Identity::getPassword
     */
    public function testGetPassword()
    {
        $this->assertEquals(null, $this->identity1->getPassword(''));
        $this->assertEquals(null, $this->identity1->getPassword('fakeEncryptionKey'));
    }

    /**
     * @covers Soliant\SimpleFM\ZF2\Authentication\Mapper\Identity::setPassword
     */
    public function testSetPasswordBadEncryptionKey()
    {
        $this->setExpectedException(InvalidArgumentException::class);
        $this->identity1->setPassword('password', []);
    }

    /**
     * @covers Soliant\SimpleFM\ZF2\Authentication\Mapper\Identity::setPassword
     */
    public function testSetPasswordBadPassword()
    {
        $this->setExpectedException(InvalidArgumentException::class);
        $this->identity1->setPassword([], []);
    }

    /**
     * @covers Soliant\SimpleFM\ZF2\Authentication\Mapper\Identity::setPassword
     * @covers Soliant\SimpleFM\ZF2\Authentication\Mapper\Identity::getPassword
     * Requires ext-mcrypt (PHP extension)
     */
    public function testSetAndGetPasswordGood()
    {
        $this->identity1->setPassword('password', 'encryptionKey');
        $this->assertEquals('password', $this->identity1->getPassword('encryptionKey'));
        $this->identity1->setPassword('password', 'encryptionKey');
        $this->assertNotSame('password', $this->identity1->getPassword('wrongEncryptionKey'));
    }
}

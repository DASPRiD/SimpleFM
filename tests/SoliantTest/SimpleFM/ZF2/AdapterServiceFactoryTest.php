<?php
namespace Soliant\SimpleFM\ZF2;

use Soliant\SimpleFM\Adapter;
use Soliant\SimpleFM\Exception\InvalidArgumentException;
use Zend\ServiceManager\ServiceLocatorInterface;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-06-28 at 11:26:04.
 */
class AdapterServiceFactoryTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var AdapterServiceFactory
     */
    protected $object;

    /**
     * @var ServiceLocatorInterface
     */
    protected $serviceManager1;

    /**
     * @var ServiceLocatorInterface
     */
    protected $serviceManager2;

    /**
     * @var ServiceLocatorInterface
     */
    protected $serviceManager3;

    /**
     * All parameters
     *
     * @var array
     */
    protected $hostParams1 = [
        'simple_fm_host_params' => [
            'hostName' => 'localhost',
            'dbName' => 'FMServer_Sample',
            'userName' => 'Admin',
            'password' => 'strongPassword',
            'protocol' => 'https',
            'port' => 443,
            'sslVerifyPeer' => true,
        ],
    ];

    /**
     * Required parameters
     *
     * @var array
     */
    protected $hostParams2 = [
        'simple_fm_host_params' => [
            'hostName' => 'localhost',
            'dbName' => 'FMServer_Sample',
            'userName' => 'Admin',
            'password' => 'strongPassword',
        ],
    ];

    /**
     * Missing required parameter
     *
     * @var array
     */
    protected $hostParams3 = [
        'simple_fm_host_params' => [
            // 'hostName' => 'localhost',
            'dbName' => 'FMServer_Sample',
            'userName' => 'Admin',
            'password' => 'strongPassword',
        ],
    ];

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        /***********************************************************************************************************
         * Mock ServiceManagers
         */
        $originalClassName = 'Zend\ServiceManager\ServiceLocatorInterface';
        $arguments = [];
        $mockClassName = 'MockServiceManager';
        $callOriginalConstructor = true;
        $callOriginalClone = true;
        $callAutoload = true;
        $mockedMethods = ['get'];
        $cloneArguments = false;
        $this->serviceManager1 = $this->getMockForAbstractClass(
            $originalClassName,
            $arguments,
            $mockClassName,
            $callOriginalConstructor,
            $callOriginalClone,
            $callAutoload,
            $mockedMethods,
            $cloneArguments
        );
        $this->serviceManager2 = clone $this->serviceManager1;
        $this->serviceManager3 = clone $this->serviceManager1;

        $this->serviceManager1->expects($this->any())
            ->method('get')
            ->will($this->returnValue(
                $this->hostParams1
            ));
        $this->serviceManager2->expects($this->any())
            ->method('get')
            ->will($this->returnValue(
                $this->hostParams2
            ));
        $this->serviceManager3->expects($this->any())
            ->method('get')
            ->will($this->returnValue(
                $this->hostParams3
            ));

        $this->object = new AdapterServiceFactory;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Soliant\SimpleFM\ZF2\AdapterServiceFactory::createService
     */
    public function testCreateService()
    {
        $this->assertArrayHasKey('simple_fm_host_params', $this->serviceManager1->get('config'));
        $this->assertArrayNotHasKey('sslVerifyPeer', $this->serviceManager2->get('config')['simple_fm_host_params']);
        $this->assertArrayNotHasKey('hostName', $this->serviceManager3->get('config')['simple_fm_host_params']);

        $adapter = $this->object->createService($this->serviceManager1);
        $this->assertInstanceOf(Adapter::class, $adapter);

        $adapter = $this->object->createService($this->serviceManager2);
        $this->assertInstanceOf(Adapter::class, $adapter);

        $this->setExpectedException(InvalidArgumentException::class);
        $adapter = $this->object->createService($this->serviceManager3);
    }
}

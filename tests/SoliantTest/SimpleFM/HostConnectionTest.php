<?php
namespace SoliantTest\SimpleFM;

use Soliant\SimpleFM\HostConnection;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-06-16 at 12:51:39.
 */
class HostConnectionTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var HostConnection
     */
    protected $hostConnectionInstance;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $hostname = 'localhost';
        $dbname = 'testdb';
        $username = 'Admin';
        $password = 'strongpassword';
        $protocol = 'http';
        $port = 80;
        $sslVerifyPeer = true;
        $this->hostConnectionInstance = new HostConnection(
            $hostname,
            $dbname,
            $username,
            $password,
            $protocol,
            $port,
            $sslVerifyPeer
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Soliant\SimpleFM\HostConnection::__construct
     */
    public function testConstruct()
    {
        $hostname = '';
        $dbname = '';
        $username = '';
        $password = '';
        $protocol = 'https';
        $port = 5000;
        $sslVerifyPeer = false;
        $hostConnection1 = new HostConnection(
            $hostname,
            $dbname,
            $username,
            $password,
            $protocol,
            $port,
            $sslVerifyPeer
        );
        $this->assertEquals($hostConnection1->getHostName(), null);
        $this->assertEquals($hostConnection1->getDbName(), null);
        $this->assertEquals($hostConnection1->getUserName(), null);
        $this->assertEquals($hostConnection1->getPassword(), null);
        $this->assertEquals($hostConnection1->getProtocol(), 'https');
        $this->assertEquals($hostConnection1->getPort(), 5000);
        $this->assertFalse($hostConnection1->getSslVerifyPeer());

    }

    /**
     * @covers Soliant\SimpleFM\HostConnection::getHostName
     */
    public function testGetHostname()
    {
        $this->assertEquals($this->hostConnectionInstance->getHostName(), 'localhost');
    }

    /**
     * @covers Soliant\SimpleFM\HostConnection::setHostName
     */
    public function testSetHostname()
    {
        $this->hostConnectionInstance->setHostName('10.10.10.10');
        $this->assertEquals($this->hostConnectionInstance->getHostName(), '10.10.10.10');
        $this->hostConnectionInstance->setHostName('localhost');
        $this->assertEquals($this->hostConnectionInstance->getHostName(), 'localhost');
    }

    /**
     * @covers Soliant\SimpleFM\HostConnection::getUserName
     */
    public function testGetUsername()
    {
        $this->assertEquals($this->hostConnectionInstance->getUserName(), 'Admin');
    }

    /**
     * @covers Soliant\SimpleFM\HostConnection::setUserName
     */
    public function testSetUsername()
    {
        $this->hostConnectionInstance->setUserName('Foo Bar');
        $this->assertEquals($this->hostConnectionInstance->getUserName(), 'Foo Bar');
        $this->hostConnectionInstance->setUserName('Admin');
        $this->assertEquals($this->hostConnectionInstance->getUserName(), 'Admin');
    }

    /**
     * @covers Soliant\SimpleFM\HostConnection::getPassword
     */
    public function testGetPassword()
    {
        $this->assertEquals($this->hostConnectionInstance->getPassword(), 'strongpassword');
    }

    /**
     * @covers Soliant\SimpleFM\HostConnection::setPassword
     */
    public function testSetPassword()
    {
        $this->hostConnectionInstance->setPassword('Foo Bar');
        $this->assertEquals($this->hostConnectionInstance->getPassword(), 'Foo Bar');
        $this->hostConnectionInstance->setPassword('strongpassword');
        $this->assertEquals($this->hostConnectionInstance->getPassword(), 'strongpassword');
    }

    /**
     * @covers Soliant\SimpleFM\HostConnection::getDbName
     */
    public function testGetDbname()
    {
        $this->assertEquals($this->hostConnectionInstance->getDbName(), 'testdb');
    }

    /**
     * @covers Soliant\SimpleFM\HostConnection::setDbName
     */
    public function testSetDbname()
    {
        $this->hostConnectionInstance->setDbName('Foo Bar');
        $this->assertEquals($this->hostConnectionInstance->getDbName(), 'Foo Bar');
        $this->hostConnectionInstance->setDbName('testdb');
        $this->assertEquals($this->hostConnectionInstance->getDbName(), 'testdb');
    }

    /**
     * @covers Soliant\SimpleFM\HostConnection::getProtocol
     */
    public function testGetProtocol()
    {
        $this->assertEquals($this->hostConnectionInstance->getProtocol(), 'http');
    }

    /**
     * @covers Soliant\SimpleFM\HostConnection::setProtocol
     */
    public function testSetProtocol()
    {
        $this->hostConnectionInstance->setProtocol('https');
        $this->assertEquals($this->hostConnectionInstance->getProtocol(), 'https');
        $this->hostConnectionInstance->setProtocol('http');
        $this->assertEquals($this->hostConnectionInstance->getProtocol(), 'http');
        $this->setExpectedException('InvalidArgumentException');
        $this->hostConnectionInstance->setProtocol('xxx');
    }

    /**
     * @covers Soliant\SimpleFM\HostConnection::getSslVerifyPeer
     */
    public function testGetSslverifypeer()
    {
        $this->assertEquals($this->hostConnectionInstance->getSslVerifyPeer(), true);
    }

    /**
     * @covers Soliant\SimpleFM\HostConnection::setSslVerifyPeer
     */
    public function testSetSslverifypeer()
    {
        $this->hostConnectionInstance->setSslVerifyPeer(0);
        $this->assertEquals($this->hostConnectionInstance->getSslVerifyPeer(), false);
        $this->hostConnectionInstance->setSslVerifyPeer('anyOleValue');
        $this->assertEquals($this->hostConnectionInstance->getSslVerifyPeer(), true);
    }

    /**
     * @covers Soliant\SimpleFM\HostConnection::getPort
     */
    public function testGetPort()
    {
        $this->hostConnectionInstance->setPort(null);
        $this->assertEquals($this->hostConnectionInstance->getPort(), 80);
        $this->hostConnectionInstance->setPort(null);
        $this->hostConnectionInstance->setProtocol('https');
        $this->assertEquals($this->hostConnectionInstance->getPort(), 443);
        $this->hostConnectionInstance->setPort(5000);
        $this->assertEquals($this->hostConnectionInstance->getPort(), 5000);
        $this->hostConnectionInstance->setPort(80);
        $this->assertEquals($this->hostConnectionInstance->getPort(), 80);
    }

    /**
     * @covers Soliant\SimpleFM\HostConnection::setPort
     */
    public function testSetPort()
    {
        $this->hostConnectionInstance->setPort(null);
        $this->assertEquals($this->hostConnectionInstance->getPort(), 80);
        $this->hostConnectionInstance->setPort(null);
        $this->hostConnectionInstance->setProtocol('https');
        $this->assertEquals($this->hostConnectionInstance->getPort(), 443);
        $this->hostConnectionInstance->setPort(5000);
        $this->assertEquals($this->hostConnectionInstance->getPort(), 5000);
        $this->hostConnectionInstance->setPort(80);
        $this->assertEquals($this->hostConnectionInstance->getPort(), 80);
    }
}

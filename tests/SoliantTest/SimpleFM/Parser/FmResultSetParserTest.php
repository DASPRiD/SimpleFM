<?php
namespace SoliantTest\SimpleFM\Parser;

use Soliant\SimpleFM\Exception\ReservedWordException;
use Soliant\SimpleFM\Parser\FmResultSetParser;
use Soliant\SimpleFM\Result\FmResultSet;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-06-27 at 20:57:00.
 */
class FmResultSetParserTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var FmResultSetParser
     */
    protected $fmResultSetParser1;

    /**
     * @var FmResultSetParser
     */
    protected $fmResultSetParser2;

    /**
     * @var FmResultSetParser
     */
    protected $fmResultSetParser3;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $xml = file_get_contents(__DIR__ . '/../TestAssets/projectsampledata.xml');
        $this->fmResultSetParser1 = new FmResultSetParser($xml);

        $xml = file_get_contents(__DIR__ . '/../TestAssets/duplicateportals.xml');
        $this->fmResultSetParser2 = new FmResultSetParser($xml);

        $xml = file_get_contents(__DIR__ . '/../TestAssets/reservedfieldname.xml');
        $this->fmResultSetParser3 = new FmResultSetParser($xml);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::setRowsByRecId
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::parse
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::parseRow
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::parsePortal
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::parsePortalRow
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::getConditionalId
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::getPortalConditionalId
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::extractFieldName
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::extractFieldData
     */
    public function testParseWithRowsByRecId()
    {
        $this->fmResultSetParser1->setRowsByRecId(true);
        $result = $this->fmResultSetParser1->parse('commandUrlDebug');
        $this->assertInstanceOf(FmResultSet::class, $result);
        $rows = $result->getRows();

        // First row is indexed as 7676
        $this->assertEquals($rows[7676], array_shift($rows));
    }

    /**
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::__construct
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::parse
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::parseRow
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::parsePortal
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::parsePortalRow
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::getConditionalId
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::getPortalConditionalId
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::extractFieldName
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::extractFieldData
     */
    public function testParseWithRowsByIndex()
    {
        $result = $this->fmResultSetParser1->parse('commandUrlDebug');
        $this->assertInstanceOf(FmResultSet::class, $result);
        $rows = $result->getRows();

        // First row is indexed as 0
        $this->assertEquals($rows[0], array_shift($rows));

        // Empty result
        $parser = new FmResultSetParser('');
        $result = $parser->parse('commandUrlDebug');
        $this->assertInstanceOf(FmResultSet::class, $result);
    }

    /**
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::parse
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::parseRow
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::parsePortal
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::parsePortalRow
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::getConditionalId
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::getPortalConditionalId
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::extractFieldName
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::extractFieldData
     * @todo test parse execution with 2 identical portals on the same layout
     */
    public function testParseWithNonUniquePortalsOnSameLayout()
    {
        $result = $this->fmResultSetParser2->parse('commandUrlDebug');
        $this->assertInstanceOf(FmResultSet::class, $result);
        $rows = $result->getRows();
        $this->assertEquals($rows[0]['log_ASC__Associate']['portalrecordcount'], 1);
        $this->assertEquals($rows[0]['log_LOG__related']['portalrecordcount'], 2);
    }

    /**
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::parse
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::parseRow
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::parsePortal
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::parsePortalRow
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::getConditionalId
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::getPortalConditionalId
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::extractFieldName
     * @covers Soliant\SimpleFM\Parser\FmResultSetParser::extractFieldData
     * @todo test parse execution with invalid field names
     */
    public function testParseWithInvalidFieldName()
    {
        $this->setExpectedException(ReservedWordException::class);
        $this->fmResultSetParser3->parse('commandUrlDebug');
    }
}

<?php
namespace SoliantTest\SimpleFM\Parser;

use SimpleXMLElement;
use Soliant\SimpleFM\Result\FmResultSet;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-07-03 at 13:27:50.
 */
class AbstractParserTest extends \PHPUnit_Framework_TestCase
{
    protected $mockParserFromSimpleXMLElement;
    protected $mockParserFromString;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $xml = null;
        $commandUrlDebug = 'commandUrlDebug';
        $originalClassName = 'Soliant\SimpleFM\Parser\AbstractParser';
        $arguments1 = [
            new SimpleXMLElement('<?xml version=\'1.0\' standalone=\'yes\'?><data/>')
        ];
        $arguments2 = [
            '<?xml version=\'1.0\' standalone=\'yes\'?><data/>'
        ];
        $mockClassName = 'MockParser';
        $callOriginalConstructor = true;
        $callOriginalClone = true;
        $callAutoload = true;
        $mockedMethods = [
            'parse',
        ];
        $cloneArguments = false;

        $this->mockParserFromSimpleXMLElement = $this->getMockForAbstractClass(
            $originalClassName,
            $arguments1,
            $mockClassName,
            $callOriginalConstructor,
            $callOriginalClone,
            $callAutoload,
            $mockedMethods,
            $cloneArguments
        );
        $this->mockParserFromSimpleXMLElement->expects($this->any())
            ->method('parse')
            ->will($this->returnValue('value'));

        $this->mockParserFromString = $this->getMockForAbstractClass(
            $originalClassName,
            $arguments2,
            $mockClassName,
            $callOriginalConstructor,
            $callOriginalClone,
            $callAutoload,
            $mockedMethods,
            $cloneArguments
        );
        $this->mockParserFromString->expects($this->any())
            ->method('parse')
            ->will($this->returnValue('value'));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Soliant\SimpleFM\Parser\AbstractParser::__construct
     * @covers Soliant\SimpleFM\Parser\AbstractParser::handleEmptyXml
     * @covers Soliant\SimpleFM\StringUtils::createResult
     */
    public function testHandleEmptyXml()
    {
        $closure = function () {
            return $this->handleEmptyXml(FmResultSet::class, 'commandUrlDebug');
        };

        $mockParserFunction = $closure->bindTo(
            $this->mockParserFromSimpleXMLElement,
            $this->mockParserFromSimpleXMLElement
        );

        $result = $mockParserFunction();

        $this->assertInstanceOf(FmResultSet::class, $result);
    }

    /**
     * @covers Soliant\SimpleFM\Parser\AbstractParser::__construct
     * @covers Soliant\SimpleFM\Parser\AbstractParser::handleEmptyXml
     * @covers Soliant\SimpleFM\StringUtils::createResult
     */
    public function testHandleEmptyXmlWrongClass()
    {
        $this->setExpectedException(\Soliant\SimpleFM\Exception\RuntimeException::class);
        $closure = function () {
            return $this->handleEmptyXml(\stdClass::class, 'commandUrlDebug');
        };

        $mockParserFunction = $closure->bindTo(
            $this->mockParserFromSimpleXMLElement,
            $this->mockParserFromSimpleXMLElement
        );

        $mockParserFunction();
    }

    /**
     * @covers Soliant\SimpleFM\Parser\AbstractParser::__construct
     * @covers Soliant\SimpleFM\Parser\AbstractParser::handleEmptyXml
     * @covers Soliant\SimpleFM\StringUtils::createResult
     */
    public function testHandleEmptyXmlInvalidClass()
    {
        $this->setExpectedException(\Soliant\SimpleFM\Exception\RuntimeException::class);
        $closure = function () {
            return $this->handleEmptyXml('InvalidClassName', 'commandUrlDebug');
        };

        $mockParserFunction = $closure->bindTo($this->mockParserFromString, $this->mockParserFromString);

        $mockParserFunction();
    }
}

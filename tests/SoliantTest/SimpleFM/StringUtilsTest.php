<?php
namespace SoliantTest\SimpleFM;

use Soliant\SimpleFM\StringUtils;
use Soliant\SimpleFM\Exception\ReservedWordException;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-06-16 at 13:00:12.
 */
class StringUtilsTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var StringUtils
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new StringUtils;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Soliant\SimpleFM\StringUtils::explodeNameValueString
     */
    public function testExplodeNameValueString()
    {
        $string = '-findany';
        $array = StringUtils::explodeNameValueString($string);
        $this->assertInternalType('array', $array);
        $this->assertEquals($array['-findany'], null);

        $string = 'name=value';
        $array = StringUtils::explodeNameValueString($string);
        $this->assertInternalType('array', $array);
        $this->assertEquals($array['name'], 'value');

        $string = 'name=value&-find';
        $array = StringUtils::explodeNameValueString($string);
        $this->assertInternalType('array', $array);
        $this->assertEquals($array['name'], 'value');
        $this->assertEquals($array['-find'], null);

    }

    /**
     * @covers Soliant\SimpleFM\StringUtils::repackCommandString
     */
    public function testRepackCommandString()
    {
        $array = ['name' => 'value', '-find' => null];
        $string = StringUtils::repackCommandString($array);
        $this->assertInternalType('string', $string);
        $this->assertEquals($string, 'name=value&-find');

        $urlEncodedString = urlencode('01/01/2015 23:12:00');
        $dateTime = new \DateTime();
        $dateTime->setTime(23, 12, 0);
        $dateTime->setDate(2015, 1, 1);
        $array = ['name' => $dateTime];
        $string = StringUtils::repackCommandString($array);
        $this->assertInternalType('string', $string);
        $this->assertEquals($string, 'name=' . $urlEncodedString);
    }

    /**
     * @covers Soliant\SimpleFM\StringUtils::fieldNameIsValid
     */
    public function testFieldNameIsValid()
    {
        $this->assertTrue(StringUtils::fieldNameIsValid('Foo Bar'));
        $this->setExpectedException('\Soliant\SimpleFM\Exception\ReservedWordException');
        StringUtils::fieldNameIsValid('index');
        StringUtils::fieldNameIsValid('recid');
        StringUtils::fieldNameIsValid('modid');
    }

    /**
     * @covers Soliant\SimpleFM\StringUtils::displayXmlError
     */
    public function testDisplayXmlError()
    {
        $file = dirname(__FILE__) . '/TestAssets/invalid.xml';
        libxml_use_internal_errors(true);
        $xml = simplexml_load_file($file);
        $errors = libxml_get_errors();
        $string = '
----------------------------------------------^
Fatal Error 76: Opening and ending tag mismatch: titles line 4 and title
  Line: 4
  Column: 46
  File: ' . dirname(__FILE__) . '/TestAssets/invalid.xml

--------------------------------------------

';
        foreach ($errors as $error) {
            $this->assertEquals(StringUtils::displayXmlError($error, $xml), $string);
        }

        $string = '
----------------------------------------------^
Warning 76: Warning message
  Line: 4
  Column: 46
  File: /path/to/invalid.xml

--------------------------------------------

';
        $mockLibXMLErrorWarning = new \stdClass();

        $mockLibXMLErrorWarning->level = LIBXML_ERR_WARNING;
        $mockLibXMLErrorWarning->code = 76;
        $mockLibXMLErrorWarning->column = 46;
        $mockLibXMLErrorWarning->message = "Warning message";
        $mockLibXMLErrorWarning->file = "/path/to/invalid.xml";
        $mockLibXMLErrorWarning->line = 4;

        $this->assertEquals(StringUtils::displayXmlError($mockLibXMLErrorWarning, $xml), $string);

        $string = '
----------------------------------------------^
Error 76: Error message
  Line: 4
  Column: 46
  File: /path/to/invalid.xml

--------------------------------------------

';
        $mockLibXMLErrorError = new \stdClass();

        $mockLibXMLErrorError->level = LIBXML_ERR_ERROR;
        $mockLibXMLErrorError->code = 76;
        $mockLibXMLErrorError->column = 46;
        $mockLibXMLErrorError->message = "Error message";
        $mockLibXMLErrorError->file = "/path/to/invalid.xml";
        $mockLibXMLErrorError->line = 4;

        $this->assertEquals(StringUtils::displayXmlError($mockLibXMLErrorError, $xml), $string);
    }

    /**
     * @covers Soliant\SimpleFM\StringUtils::extractErrorFromPhpMessage
     */
    public function testExtractErrorFromPhpMessage()
    {
        $return = array('errorCode' => '401' , 'errorMessage' => 'Unauthorized' , 'errorType' => 'HTTP');
        $string = 'HTTP/1.1 401 Unauthorized';
        $this->assertEquals(StringUtils::extractErrorFromPhpMessage(['message' => $string]), $return);

        $return = array('errorCode' => null , 'errorMessage' => 'FooBar' , 'errorType' => 'HTTP');
        $string = 'HTTP/1.1 FooBar';
        $this->assertEquals(StringUtils::extractErrorFromPhpMessage($string), $return);

        $return = array('errorCode' => 7 , 'errorMessage' => 'Some PHP Error' , 'errorType' => 'PHP');
        $string = 'Some PHP Error';
        $this->assertEquals(StringUtils::extractErrorFromPhpMessage($string), $return);
    }

    /**
     * @covers Soliant\SimpleFM\StringUtils::errorToEnglish
     */
    public function testErrorToEnglish()
    {
        $error = array( 0 => 'No Error', 10 => 'Requested data is missing');
        $this->assertEquals(StringUtils::errorToEnglish(10), 'Requested data is missing');
        $this->assertEquals(StringUtils::errorToEnglish('fake value'), 'Undefined');
    }
}
